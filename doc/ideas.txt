Rename some things:
    Namespaces stay mrbavii\helper, etc
        This uses mrbavii\ to avoid any namespace conflict
    Internal groups can drop the 'mrbavii' part, for example:

        Action::execute('mrbavii.helper', 'listdir')

    Can just be

        Action::execute('helper', 'listdir')

    The 'mrbavii' isn't needed because it is not meant to avoid conflicts with other class names.
    It is just mean to separate the sitehelper actions, templates, misc, into three main groups:

    helper      Basic helper configuration and items
    stuff/cms   Items for any content system made
    site        Items for site specific customizations
        (template.site.header, template.site.footer)
            used by various things to wrap output like directory listing and error pages

Database
========

Db::connection('name')
    Calls Db::connect if not already set
        Uses 'driver' to select driver class
        Constructs driver with config
        Calls connect on driver
        returns driver instance
    If already set, make sure connected.
        

Driver
    __construct takes config
    connect
        Driver::connect shoud check $pdo, if null then connect, if not null then already
        connected.
    disconnect
    has pdo instance
        not used direclty, call (connect())
    has grammar instance
        not used directly, call (grammar())
        Grammar gets Driver instance

Table
    Table gets Driver instance
    Can have grammar from driver

    prepareXYZ
        Builds a query, then calls Driver::prepare
        Driver::prepare returns stmt\Base or derived
        Then can all take/skip to set information
    insert/update/select/delete(params)
        Still uses prepared queries using prepareXYZ, then executes
        the statement insert/update/select/delete method direclty with params

Schema
    Schema gets Driver instance
    Can have grammar from driver
    This can do work to create tables, drop tables, check if a table exists, check if a column
    exists.
    Altering tables is not planned yet.

Stmt\Base
    take/skip don't do anything
Stmt\MsSQL
    From my understanding, MsSQL does not support OFFSET/LIMIT, so the grammar
    format function would return blank.  Then, the prepare function would call
    this instance's take/skip.  When calling Stmt\MsSQL::get, the code would
    automatically take measures to skip the correct number of rows.

ResultSet
    max (default null)
        When this is set, iterating over the result set will stop after this many
        rows have been read.  Not normally needed, but used when the SQL driver does
        not support OFFSET/LIMIT.  This is the "LIMIT" value.

Grammmar
    Takes drive

Connection -> Driver
Database -> Db (also in config and tests)

Driver::insert/update/delete/select(sql)
    Generic
        takes direct sql
        Can take parameters
        returns
            insert
                id
            update/delete
                affected row count (maybe)
            select
                result set
    Does not use prepared queries, just uses exec()
Driver::prepare (Prepare PDO statement, wrap in Stmt\Base or derived)
Stmt
    skip
    take
        Tells statement how much to take or skip.  Ignored for many drivers if
        the SQL language supports LIMIT/OFFSET.  If not, then it is used when executing
        a select query
    insert (call if using INSERT)
    update (call if using UPDATE)
    delete (call if using DELETE)
    select (call if using SELECT)
Driver::transaction()
    begin
    commit
    rollback
Base driver should be directly PDO instance
transaction(fn)
{
    begin
    try
    {
        call_user_func(fn)
        commit
    }
    catch
    {
        rollback
        throw
    }
}


Db::connection('name')->(table/insert/update/delete/exec/transaction)
Db::(table/insert/update/delete/transaction/exec)
    simply use default connection

Maybe use __callStatic__ (Also use for other classes where useful)

public static function __callStatic__($name, $args)
{
    return call_user_func_array(array(Db::connection(), $name), $args);
}

While I already have a simple set of features, implement something more like Laravel.

Support using a specific database:

Database::table('tablename')
    Uses the default database

Database::table('tablename', 'databasename')
    Uses the specified database from 'database.connections.<name>'

Behind the scenes, these really just call
    Database::connection('name')->table(...) or Database::connection()->table()

table() methods:

    where('col', 'op', 'value')
    where(fn)
        Database::Col, Database::Expr, Database::Raw, and Database::Param  cam be used
        Database::Value
        op
            =
            <>
            >
            <
            LIKE 
            IN
            NULL
            NOTNULL
            BETWEEN
            NOTBETWEEN

    distinct() (use distinct rows)
    orderBy('name', '+name2', '-name3')
        + or nothing means ASC, - means DESC

    skip(n) OFFSET
    take(n) LIMIT
    join('table', 'column', 'op', 'col2')
    join('table', fn)
        $join->on('col', 'op', 'col2')
            orOn
            where
            orWhere
    leftJoin
    innerJoin
    outerJoin

    count()
    min('col')
    max('col')
    avg('col')
    sum('col')
    increment('col', count)
    decrement('col', count)

    selectSql
    insertSql
    updateSql
    deleteSql
        useful for Database::prepare()

    prepareSelect
    prepareInsert
    prepareUpdate
    prepareDelete
        Build prepared statement

        Execute with $stmt->(select|insert|update|delete)(data)
        Insert queries will return rowid
        Others may return modified rows
        Select will return result set

    Behind the scenes prepareXYZ simply calls $driver->prepare($this->XYZSql())
        and then $stmt->skip, $stmp->take
    Behind the scenes, select/insert/update/delete will simply call
        prepareXYZ->blah(...).  This allows for escaping of any data and prevents
        SQL injection.

Use PDO
    allows for parameters

Database::table('users')
$stmt = Database::table('forum', 'users')->join('groups', 'users.gid', '=', 'groups.id')
    ->select('table1.col', 'table2.col', 'table2.col2')
    ->where('table1.col', '=', Param('p1')
    ->orWhere('table2.col2', '<', Param('p2')
    ->prepareGet();

$stmt->exec(array('p1' => $data, 'p2' => $more_data))



Actions
=======

Action::execute('helper', 'listdir')  // uses template site.header, site.footer
Action::execute('helper', 'error')    // uses template site.header, site.footer
Action::execute('helper', 'sendfile') //


Action::execute('group', 'name', $params)
    uses config:
        action.<group>.<name>.callback
        action.<group>.<name>.config

        call_user_func(callback, $config, $params)

// Get a url
    uses config.map

Action::url
Action::dispatch
    First call Module::load, which will allow all modules to load and register their dispatchers if any


Action.url (get url from group/action)
    action.map.<name> = group/action
    action.map.<name> = group

    When handling action:
        if $1 in map:
            if $1 is full:
                action = map entry
            else
                action = map entry/$2
        else
            action = $1/$2

        decode parameters

    When calling url($group, $action, ...)
        for each map item
            if map item is $group/$action
                use map item
            if map item is $group
                use map item/$action
            else
                use $group/$action

        encode parameters
            


// Encode and decode parameters into a URL
Action::encode
Action::decode

Permissions Helpers (Also need basic user and group helpers)
============================================================


    abstract class Permissions
    {
        protected static abstract function mergeSiblings($brother, $sister);
        protected static abstract function mergeParent($parent, $child);

        protected static function preGet($user, $object) { return FALSE; }
        protected static function postGet($user, $object, $perms) { return TRUE; }
        public abstract function get($user, $object);
    }

    class ForumPermissions extends Permissions
    {
        static $permtable = 'forum_permissions';
        static $permtable_oid = 'forum';
        static $permtable_gid = 'group';
        static $objtable = 'forums';
        static $objtable_oid = 'id';
        static $objtable_parent = 'parent';
        static $objtable_inherit = 'inherit'
        static $columns = array('canread', 'canreply', 'cancreate', 'canattach', 'attachsize');

        protected static function mergeSiblings($brother, $sister)
        {
            $results = array();
            foreach(static::$columns as $col)
            {
                if($col == 'attachsize')
                {
                    $results[$col] = max($brother[$col], $sister[$col]);
                }
                else
                {
                    if($bother[$col] == d || $sister[$col] == deny)
                    {
                        $results[$col] = deny;
                    }
                    else if(brother[$col] == allow || $siter[$col] == allow)
                    {
                        $results[$col] = allow;
                    }
                    else
                    {
                        $results[$col] = default;
                    }
                }
            }

            return $results;
        }

        protected static function mergeParent($parent, $child)
        {
            $results = array();
            foreach(static::$columns as $col)
            {
                if($col == 'attachsize')
                {
                    $result[$col] = $child[$col];
                }
                else
                {
                    if($child[col] == deny || $child[$col] == allow)
                    {
                        $result[$col] = $child[$col];
                    }
                    else
                    {
                        $result[$col] = $parent[$col];
                    }
                }
            }

            return $results;
        }
    }


SendFile($filename)
{

    Already headers and $filesize


    $partial = Request::getRange($start, $end, $filesize);
    // This will determine if there is a partial download, and
    // also set $start and $end accordingly even if there is not one


    ...

    The backend:
    header('Accept-Ranges: bytes'); // If the backend supports partial contents

    if($partial)
    {
        Response::setRange($start, $end, $filesize)
        ...
    }

    This means the function called by server.sendfile will need the following:

    function($filename, $filesize, $start, $end, $partial);

    If it does not support partial downloads, it can just ignore $start,$end,$partial
}
Configuration Items:

server.mimetypes = array("ending" => "content-type", ...);
server.sendfile = function($filename) { ... };

Request::getRange($range, $filesize)
    Return TRUE if a partial request, otherwise FALSE
    If TRUE, $range is array($start, $end)

Response::setRange($start, $end, $filesize)


if(Request::getRange($range, $filesize))
{
    sendFile($filename, array($range[0], $range[1], $filesize));
}
else
{
    sendFile($filename);
}

sendFile($filename, $range=null)
{
    If we support ranges:
    if($range)
        Response::setRange($...
}


    Table -> Split into QueryBuilder and Table (Maybe, maybe not)
    Table -> Split into Table and Builder (builder does the create stuff)
    Database:
        On connecting, set isolation level to maximum (serializable) and enable foreign keys
        Foreign keys:
            on delete/update
                cascade
                set default
                set null
                restricted
                no action

ClassLoader
    register_map(dir, namespace, map)
Database
    SQLite2 and SQLite3
    MySQL
    PostgreSQL
    maybe others
Cache
    Driver
    NullDriver (cache always returns empty)
    Memory (use internal array, only kept for the current request)
    MemcacheDriver
    RedisDriver
    ApcDriver
    FileDriver (store cache in a file)
    SqliteDriver (store cache in a file, but uses a database for all items)
    DatabaseDriver (stores cache in a named database)
Session
    Php (PHP based sessions, pretty much unlimited data size)
    Sqlite (Store session data in a database, there is a limit on data size depending on approache)
        Single row per session: id, timestamp, etc, serialized data
        Multiple rows per session, two tables
            Session (id, timestampe, information)
            Values (id, session, name, serialized value)
Security
Action
Browser
    Request
    Response
Util
    load_php
    load_ini
    guid
Exception
Logger
Captcha
    Basic
    PickByShape
    PickByColor
ShCode (generic bbcode parser, parse into nested arrays)
Server
    Server information helper
        front, host, http, https, etc
    sendfile

License
=======

License under MIT.  1st, we are making this based on some code from the Laravel framework.
We are actually making it our own, but using Laravel as an example for some ideas and whatnots.
But to avoid issues, and since Laravel is MIT licensed, we will also use the MIT license.

