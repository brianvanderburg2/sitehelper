Classes
=======

Config
ClassLoader
Database
    Connector
    PdoConnector
    etc
    Grammar
    MysqlGrammar
    PgsqlGrammar
    SqliteGrammar
    etc
    Query
    etc
Cache
    Driver
    NullDriver
    MemcacheDriver
    RedisDriver
    ApcDriver
    FileDriver
    SqliteDriver
Session
Security
Template
Dispatcher (based on idea of a front end controller)
    register('path', array(data))
        callback can be a Closure or filename.
    dispatch($path=null)
        if path is null, use next component (if any, if non then error 404)
        after a match is found, clear registered callbacks and call it,
            setting the next component as the current component
            This way, the callback can register new paths for that component if
            desired
        if no match found: error 404 (Trigger)

    Dispatcher::current() (current segment)
    Dispatcher::parent() (complete parent segment)
    Dispatcher::path() (current segment to end)
    Dispatcher::next() (next segment, set next to current)

        in index.php/path/to/test/current/example
            current() -> current
            parent() -> path/to/test
            path() -> current/example
Browser
    Request
    Response
        redirect
        error404 (Default action for Trigger::fire('404')
Util
    load_php
    load_ini
    guid
Exception
Language
Logger
Captcha
FormBuilder
ShCode (generic bbcode parser, parse into nested arrays)
Server
    Server information helper
        front, host, http, https, etc
Url
    register('name', 'value')
        if(not contains ':')
            if(begins with /) use local server/port as start
            else use local server/port and front end controller as start
            if setting is secure, use https
            (config information is server.front, servert.host, server.port.http, server.port.https)
            If not specified, try to auto detect
        else
            absolute path
    get('
Trigger
    A simple event hook
    fire('name', 'optional parameters')
        Call all hooks
    hook('name', callback)
        Get called when fired.
        

Database
========

$db = Database::connect();

$db->table('users')->join('groups', 'users.gid', '=', 'groups.id')
   ->where('users.id', '=', $uid)->get(array('users.uid' => 'uid'));


First, rename Connection to Grammar, and Driver to Connection


Database::connect()
{
    just create the driver, not the grammer

    internally, a grammar() method will create the grammar on demand when needed, using
    Database::drivers, passing $this (the driver)

    Table is Query builder, can use driver and grammar


    Driver has insert method, returns last inserted row id.
    For all supported database, the row id should be a row with a serially increasing number
}

class Connection
{
    __construct(...)
    {
        $this->settings = $settings);
    }

    abstract public function connect()
    {
    }

    public function grammar()
    {
        if($this->grammar === null)
        {
            $driver = $this->settings['driver'];

            use Database::drivers[$driver] to create grammar, passing $this
        }
    }

    atomic($callback)
    {
    }

    exec(...)
    query(...)
    lastid()
    table(...)
    {
        return new Table($this, $this->grammar, $tablename);
    }

    


Table methods:
    exists
    Table('users')->exists()
    Table('users')->columns()


}

Browser/Request/Response
========================

class Browser
{
    // static class
    static $filetypes = array(); // ending -> filetype
}

class Request extends Browser
{
}

class Response extends Browser
{
}



License
=======

License under MIT.  1st, we are making this based on some code from the Laravel framework.
We are actually making it our own, but using Laravel as an example for some ideas and whatnots.
To avoid issues, and since Laravel is MIT licensed, we will also use the MIT license.

