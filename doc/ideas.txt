Classes
=======

Config
ClassLoader
Database
    Driver
    PdoDriver
    Grammar
    MysqlGrammar
    PgsqlGrammar
    SqliteGrammar
Cache
    Driver
    NullDriver
    MemcacheDriver
    RedisDriver
    ApcDriver
    FileDriver
    SqliteDriver
Session
Security
Template
Dispatcher
Browser
Request
Response
Util
Exception
Language
Logger
Captcha
FormBuilder
ShCode
Temp

Database
========

$db = Database::connect();

$db->table('users')->join('groups', 'users.gid', '=', 'groups.id')
   ->where('users.id', '=', $uid)->get(array('users.uid' => 'uid'));

Database::connect idea

instead of returning a driver, return a grammer:

That is, instead of the user interacting with the driver directly, they interact with
the grammar which will then work with the driver;

Register will require both the driver class and the grammar class to use:

register('sqlite3', 'Sqlite3Grammar', 'Sqlite3Driver')

connect:
    create the driver
    then create the grammar and return it

    connect(...)
        $driver = new Driver(...);
        $grammar = new Grammar($driver, ...);

        return $grammar;

        $db = Database::connect();
        $db->table('users')->...()


License
=======

License under MIT.  1st, we are making this based on some code from the Laravel framework.
We are actually making it our own, but using Laravel as an example for some ideas and whatnots.
To avoid issues, and since Laravel is MIT licensed, we will also use the MIT license.

